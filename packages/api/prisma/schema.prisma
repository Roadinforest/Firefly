// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
// provider = "prisma-client-js"
//  output   = "../generated/prisma"
//}

//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // A user can be part of one Jar as user1 or user2
  jarAsUser1 Jar?     @relation("User1")
  jarAsUser2 Jar?     @relation("User2")

  // The fireflies this user has created
  fireflies Firefly[]
}

model Jar {
  id      String @id @default(cuid())
  user1Id String @unique
  user2Id String @unique

  user1 User @relation("User1", fields: [user1Id], references: [id])
  user2 User @relation("User2", fields: [user2Id], references: [id])

  fireflies Firefly[]
}

model Firefly {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   // For now, just text
  type      String   @default("TEXT") // Future-proofing for IMAGE, LINK, etc.

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  jarId String
  jar   Jar    @relation(fields: [jarId], references: [id])
}

